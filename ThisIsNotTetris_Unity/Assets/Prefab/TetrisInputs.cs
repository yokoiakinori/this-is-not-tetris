//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Prefab/TetrisInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TetrisInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TetrisInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TetrisInputs"",
    ""maps"": [
        {
            ""name"": ""Mino"",
            ""id"": ""3f5e4cf2-fc85-42d0-81d6-195f292a2a8a"",
            ""actions"": [
                {
                    ""name"": ""LeftMove"",
                    ""type"": ""Button"",
                    ""id"": ""00c5ebd2-ddb4-4210-88d6-84b7760376f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""eb64df4f-1172-44c0-aac4-8ad0749cef08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMove"",
                    ""type"": ""Button"",
                    ""id"": ""b46a725b-2a0f-4dc9-a6c2-9903b9b9e949"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownMove"",
                    ""type"": ""Button"",
                    ""id"": ""d6340328-cc1c-43f5-a2dd-f7b7b02c297b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a47dbd65-ea59-4e89-9b94-a3c90436d11d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4c88904-150f-4e7e-8a5a-94d418d33919"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bda4773-1454-4693-8919-312c0473450b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3809226-ba09-4ed8-a918-2736a57d95a2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mino
        m_Mino = asset.FindActionMap("Mino", throwIfNotFound: true);
        m_Mino_LeftMove = m_Mino.FindAction("LeftMove", throwIfNotFound: true);
        m_Mino_Rotate = m_Mino.FindAction("Rotate", throwIfNotFound: true);
        m_Mino_RightMove = m_Mino.FindAction("RightMove", throwIfNotFound: true);
        m_Mino_DownMove = m_Mino.FindAction("DownMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mino
    private readonly InputActionMap m_Mino;
    private List<IMinoActions> m_MinoActionsCallbackInterfaces = new List<IMinoActions>();
    private readonly InputAction m_Mino_LeftMove;
    private readonly InputAction m_Mino_Rotate;
    private readonly InputAction m_Mino_RightMove;
    private readonly InputAction m_Mino_DownMove;
    public struct MinoActions
    {
        private @TetrisInputs m_Wrapper;
        public MinoActions(@TetrisInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMove => m_Wrapper.m_Mino_LeftMove;
        public InputAction @Rotate => m_Wrapper.m_Mino_Rotate;
        public InputAction @RightMove => m_Wrapper.m_Mino_RightMove;
        public InputAction @DownMove => m_Wrapper.m_Mino_DownMove;
        public InputActionMap Get() { return m_Wrapper.m_Mino; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MinoActions set) { return set.Get(); }
        public void AddCallbacks(IMinoActions instance)
        {
            if (instance == null || m_Wrapper.m_MinoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MinoActionsCallbackInterfaces.Add(instance);
            @LeftMove.started += instance.OnLeftMove;
            @LeftMove.performed += instance.OnLeftMove;
            @LeftMove.canceled += instance.OnLeftMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @RightMove.started += instance.OnRightMove;
            @RightMove.performed += instance.OnRightMove;
            @RightMove.canceled += instance.OnRightMove;
            @DownMove.started += instance.OnDownMove;
            @DownMove.performed += instance.OnDownMove;
            @DownMove.canceled += instance.OnDownMove;
        }

        private void UnregisterCallbacks(IMinoActions instance)
        {
            @LeftMove.started -= instance.OnLeftMove;
            @LeftMove.performed -= instance.OnLeftMove;
            @LeftMove.canceled -= instance.OnLeftMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @RightMove.started -= instance.OnRightMove;
            @RightMove.performed -= instance.OnRightMove;
            @RightMove.canceled -= instance.OnRightMove;
            @DownMove.started -= instance.OnDownMove;
            @DownMove.performed -= instance.OnDownMove;
            @DownMove.canceled -= instance.OnDownMove;
        }

        public void RemoveCallbacks(IMinoActions instance)
        {
            if (m_Wrapper.m_MinoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMinoActions instance)
        {
            foreach (var item in m_Wrapper.m_MinoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MinoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MinoActions @Mino => new MinoActions(this);
    public interface IMinoActions
    {
        void OnLeftMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnRightMove(InputAction.CallbackContext context);
        void OnDownMove(InputAction.CallbackContext context);
    }
}
